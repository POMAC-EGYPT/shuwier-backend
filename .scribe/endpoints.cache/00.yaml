## Autogenerated by Scribe. DO NOT MODIFY.

name: 'User Authentication'
description: |-

  APIs for user registration, authentication, and account management.
  These endpoints handle user registration with email verification, login, password reset,
  and other authentication-related functionality for both clients and freelancers.
endpoints:
  -
    httpMethods:
      - POST
    uri: api/auth/register
    metadata:
      groupName: 'User Authentication'
      groupDescription: |-

        APIs for user registration, authentication, and account management.
        These endpoints handle user registration with email verification, login, password reset,
        and other authentication-related functionality for both clients and freelancers.
      subgroup: ''
      subgroupDescription: ''
      title: 'User Registration.'
      description: |-
        This endpoint initiates the user registration process by sending a verification code to the provided email.
        Users can register as either freelancers or clients. Freelancers need to provide additional professional information.
        After successful validation, a 4-digit OTP code will be sent to the email for verification.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: "User's full name (Arabic or English)."
        required: true
        example: 'أحمد محمد'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "User's email address (must be unique and valid)."
        required: true
        example: ahmed@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'Password (min 8 chars, must contain uppercase, lowercase, number, and special character).'
        required: true
        example: Password123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      type:
        name: type
        description: 'User type. Must be either "freelancer" or "client".'
        required: true
        example: freelancer
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      linkedin_link:
        name: linkedin_link
        description: 'required_if:type,freelancer LinkedIn profile URL (required for freelancers).'
        required: false
        example: 'https://linkedin.com/in/ahmed'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      twitter_link:
        name: twitter_link
        description: 'required_if:type,freelancer Twitter profile URL (required for freelancers).'
        required: false
        example: 'https://twitter.com/ahmed'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      other_freelance_platform_links:
        name: other_freelance_platform_links
        description: 'required_if:type,freelancer Array of other freelance platform URLs (1-3 links, required for freelancers).'
        required: false
        example:
          - 'https://upwork.com/freelancers/ahmed'
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      portfolio_link:
        name: portfolio_link
        description: 'required_if:type,freelancer Portfolio website URL (required for freelancers).'
        required: false
        example: 'https://ahmed-portfolio.com'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Password confirmation (must match password).'
        required: true
        example: Password123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'other_freelance_platform_links.*':
        name: 'other_freelance_platform_links.*'
        description: 'URL format for each freelance platform link.'
        required: false
        example: 'https://upwork.com/freelancers/ahmed'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'أحمد محمد'
      email: ahmed@example.com
      password: Password123!
      type: freelancer
      linkedin_link: 'https://linkedin.com/in/ahmed'
      twitter_link: 'https://twitter.com/ahmed'
      other_freelance_platform_links:
        - 'https://upwork.com/freelancers/ahmed'
      portfolio_link: 'https://ahmed-portfolio.com'
      password_confirmation: Password123!
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Verification code sent successfully"
          }
        headers: []
        description: 'Verification code sent successfully'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The email has already been taken."
          }
        headers: []
        description: 'Email already exists'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The email is already in the invitation list."
          }
        headers: []
        description: 'Email in invitation list'
        custom: []
      -
        status: 422
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The email field is required."
          }
        headers: []
        description: 'Validation error'
        custom: []
      -
        status: 429
        content: |-
          {
            "status": false,
            "error_num": 429,
            "message": "Too many verification attempts. Please try again later."
          }
        headers: []
        description: 'Too many attempts'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/resend-code
    metadata:
      groupName: 'User Authentication'
      groupDescription: |-

        APIs for user registration, authentication, and account management.
        These endpoints handle user registration with email verification, login, password reset,
        and other authentication-related functionality for both clients and freelancers.
      subgroup: ''
      subgroupDescription: ''
      title: 'Resend Verification Code.'
      description: |-
        This endpoint resends the verification code to the user's email if they didn't receive it
        or if the previous code expired. Rate limiting applies to prevent spam.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email address to resend the verification code to.'
        required: true
        example: ahmed@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: ahmed@example.com
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Verification code resent successfully"
          }
        headers: []
        description: 'Code resent successfully'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "Email not found or already verified"
          }
        headers: []
        description: 'Email not found'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "Please wait 60 seconds before requesting another code"
          }
        headers: []
        description: 'Rate limit exceeded'
        custom: []
      -
        status: 422
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The email field is required."
          }
        headers: []
        description: 'Validation error'
        custom: []
      -
        status: 429
        content: |-
          {
            "status": false,
            "error_num": 429,
            "message": "Too many verification attempts. Please try again later."
          }
        headers: []
        description: 'Too many attempts'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/verify-email
    metadata:
      groupName: 'User Authentication'
      groupDescription: |-

        APIs for user registration, authentication, and account management.
        These endpoints handle user registration with email verification, login, password reset,
        and other authentication-related functionality for both clients and freelancers.
      subgroup: ''
      subgroupDescription: ''
      title: 'Verify Email and Complete Registration.'
      description: |-
        This endpoint verifies the email OTP code sent during registration and completes the user account creation.

        **Approval Status Logic:**
        - **Clients**: Always approved immediately and ready to use
        - **Freelancers with invitation**: If the email has a pending invitation from admin, the freelancer will be approved immediately without admin review
        - **Regular freelancers**: Account created with "requested" approval status and requires admin approval
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email address to verify.'
        required: true
        example: user@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      otp:
        name: otp
        description: 'The 4-digit verification code sent to email.'
        required: true
        example: '1234'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: user@example.com
      otp: '1234'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "User registered successfully",
            "data": {
              "user": {
                "id": 1,
                "name": "John Doe",
                "email": "john@example.com",
                "type": "freelancer",
                "email_verified_at": "2025-08-24T10:30:00.000000Z",
                "phone": null,
                "is_active": true,
                "about_me": null,
                "profile_picture": null,
                "approval_status": "requested",
                "linkedin_link": "https://linkedin.com/in/johndoe",
                "twitter_link": "https://twitter.com/johndoe",
                "other_freelance_platform_links": ["https://upwork.com/freelancers/johndoe"],
                "portfolio_link": "https://johndoe.com",
                "headline": null,
                "description": null,
                "created_at": "2025-08-24T10:30:00.000000Z",
                "updated_at": "2025-08-24T10:30:00.000000Z"
              },
              "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        headers: []
        description: 'Freelancer registration completed'
        custom: []
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "User registered successfully",
            "data": {
              "user": {
                "id": 1,
                "name": "John Doe",
                "email": "john@example.com",
                "type": "freelancer",
                "email_verified_at": "2025-08-24T10:30:00.000000Z",
                "phone": null,
                "is_active": true,
                "about_me": null,
                "profile_picture": null,
                "approval_status": "approved",
                "linkedin_link": "https://linkedin.com/in/johndoe",
                "twitter_link": "https://twitter.com/johndoe",
                "other_freelance_platform_links": ["https://upwork.com/freelancers/johndoe"],
                "portfolio_link": "https://johndoe.com",
                "headline": null,
                "description": null,
                "created_at": "2025-08-24T10:30:00.000000Z",
                "updated_at": "2025-08-24T10:30:00.000000Z"
              },
              "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
                "headline": null,
                "description": null,
                "created_at": "2025-08-24T10:30:00.000000Z",
                "updated_at": "2025-08-24T10:30:00.000000Z"
              },
              "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        headers: []
        description: 'Invited freelancer registration completed (pre-approved)'
        custom: []
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "User registered successfully",
            "data": {
              "user": {
                "id": 2,
                "name": "Jane Smith",
                "email": "jane@example.com",
                "email_verified_at": "2025-08-24T10:30:00.000000Z",
                "phone": null,
                "type": "client",
                "is_active": true,
                "about_me": null,
                "profile_picture": null,
                "company": null,
                "created_at": "2025-08-24T10:30:00.000000Z",
                "updated_at": "2025-08-24T10:30:00.000000Z"
              },
              "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        headers: []
        description: 'Client registration completed'
        custom: []
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Email verification successful"
          }
        headers: []
        description: 'Password reset verification'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "Invalid or expired verification code"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The otp field is required."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/reset-email
    metadata:
      groupName: 'User Authentication'
      groupDescription: |-

        APIs for user registration, authentication, and account management.
        These endpoints handle user registration with email verification, login, password reset,
        and other authentication-related functionality for both clients and freelancers.
      subgroup: ''
      subgroupDescription: ''
      title: 'Reset Email Address.'
      description: |-
        This endpoint allows users to change their email address during the registration process
        if they have exceeded the maximum verification attempts. A new verification code will be sent
        to the new email address.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      old_email:
        name: old_email
        description: 'The current email address that needs to be changed.'
        required: true
        example: oldemail@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      new_email:
        name: new_email
        description: 'The new email address (must be unique in both users and invitations, and valid).'
        required: true
        example: newemail@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      old_email: oldemail@example.com
      new_email: newemail@example.com
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Verification code sent to new email address"
          }
        headers: []
        description: 'Email reset successfully'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "Verification session expired or old email not found"
          }
        headers: []
        description: 'Old email not found'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "Cannot change email yet. Complete verification attempts first."
          }
        headers: []
        description: 'Cannot change email yet'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The new email has already been taken."
          }
        headers: []
        description: 'New email already exists'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The new email is already in the invitation list."
          }
        headers: []
        description: 'New email in invitation list'
        custom: []
      -
        status: 422
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The old_email field is required."
          }
        headers: []
        description: 'Validation error'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/login
    metadata:
      groupName: 'User Authentication'
      groupDescription: |-

        APIs for user registration, authentication, and account management.
        These endpoints handle user registration with email verification, login, password reset,
        and other authentication-related functionality for both clients and freelancers.
      subgroup: ''
      subgroupDescription: ''
      title: Login.
      description: 'This endpoint authenticates users and returns a JWT token.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'User email address.'
        required: true
        example: user@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'User password (minimum 6 characters).'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: user@example.com
      password: password123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Login successful",
            "user": {
              "id": 2,
              "name": "Jane Smith",
              "email": "jane@example.com",
              "email_verified_at": "2025-08-24T10:30:00.000000Z",
              "phone": null,
              "type": "client",
              "is_active": true,
              "about_me": null,
              "profile_picture": null,
              "company": null,
              "created_at": "2025-08-24T10:30:00.000000Z",
              "updated_at": "2025-08-24T10:30:00.000000Z"
            },
            "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The email field is required."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "status": false,
            "error_num": 401,
            "message": "Invalid password"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "status": false,
            "error_num": 403,
            "message": "Account is blocked"
          }
        headers: []
        description: 'Account blocked'
        custom: []
      -
        status: 403
        content: |-
          {
            "status": false,
            "error_num": 403,
            "message": "Email is not verified"
          }
        headers: []
        description: 'Email not verified'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/forget-password
    metadata:
      groupName: 'User Authentication'
      groupDescription: |-

        APIs for user registration, authentication, and account management.
        These endpoints handle user registration with email verification, login, password reset,
        and other authentication-related functionality for both clients and freelancers.
      subgroup: ''
      subgroupDescription: ''
      title: 'Forget Password - Send Reset Code.'
      description: |-
        This endpoint initiates the password reset process by sending a verification code to the user's email.
        A reset token is also generated and returned for use in the password reset process.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: "User's email address (must exist in the system)."
        required: true
        example: user@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: user@example.com
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Verification code sent successfully",
            "data": {
              "token": "abc123def456ghi789jkl012mno345pqr678stu901vwx234yz567890"
            }
          }
        headers: []
        description: 'Reset code sent successfully'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The selected email is invalid."
          }
        headers: []
        description: 'Email not found'
        custom: []
      -
        status: 422
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The email field is required."
          }
        headers: []
        description: 'Validation error'
        custom: []
      -
        status: 429
        content: |-
          {
            "status": false,
            "error_num": 429,
            "message": "Too many verification attempts. Please try again later."
          }
        headers: []
        description: 'Too many attempts'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/reset-password
    metadata:
      groupName: 'User Authentication'
      groupDescription: |-

        APIs for user registration, authentication, and account management.
        These endpoints handle user registration with email verification, login, password reset,
        and other authentication-related functionality for both clients and freelancers.
      subgroup: ''
      subgroupDescription: ''
      title: 'Reset Password.'
      description: |-
        This endpoint completes the password reset process using the verification code and reset token.
        The user must first verify their email through the forget password flow before using this endpoint.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: "User's email address."
        required: true
        example: user@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      token:
        name: token
        description: 'Reset token received from forget password endpoint.'
        required: true
        example: abc123def456ghi789
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'New password (min 8 chars, must contain uppercase, lowercase, number, and special character).'
        required: true
        example: NewPassword123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Password confirmation (must match password).'
        required: true
        example: NewPassword123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: user@example.com
      token: abc123def456ghi789
      password: NewPassword123!
      password_confirmation: NewPassword123!
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Password reset successfully"
          }
        headers: []
        description: 'Password reset successfully'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "Verification session expired or not found"
          }
        headers: []
        description: 'Verification session expired'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "Email verification required before password reset"
          }
        headers: []
        description: 'Verification code not verified'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "Invalid or expired reset token"
          }
        headers: []
        description: 'Invalid token'
        custom: []
      -
        status: 422
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The email field is required."
          }
        headers: []
        description: 'Validation error'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/change-password
    metadata:
      groupName: 'User Authentication'
      groupDescription: |-

        APIs for user registration, authentication, and account management.
        These endpoints handle user registration with email verification, login, password reset,
        and other authentication-related functionality for both clients and freelancers.
      subgroup: ''
      subgroupDescription: ''
      title: 'Change User Password.'
      description: |-
        This endpoint allows authenticated users to change their password by providing their current password
        and a new password. The current password must be verified before the new password is set.
        This is a secure way for users to update their passwords while logged in.
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      current_password:
        name: current_password
        description: "User's current password for verification."
        required: true
        example: CurrentPassword123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      new_password:
        name: new_password
        description: 'New password (min 8 chars, must contain uppercase, lowercase, number, and special character).'
        required: true
        example: NewPassword123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      new_password_confirmation:
        name: new_password_confirmation
        description: 'Password confirmation (must match new_password).'
        required: true
        example: NewPassword123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      current_password: CurrentPassword123!
      new_password: NewPassword123!
      new_password_confirmation: NewPassword123!
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Password changed successfully"
          }
        headers: []
        description: 'Password changed successfully'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "Current password is incorrect"
          }
        headers: []
        description: 'Current password incorrect'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "Failed to change password. Please try again."
          }
        headers: []
        description: 'Password change failed'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The current_password field is required."
          }
        headers: []
        description: 'Validation error'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The new_password confirmation does not match."
          }
        headers: []
        description: 'Password confirmation mismatch'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The new_password must contain at least one uppercase letter, one lowercase letter, one number, and one special character."
          }
        headers: []
        description: 'Password too weak'
        custom: []
      -
        status: 401
        content: |-
          {
            "status": false,
            "error_num": 401,
            "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/change-email
    metadata:
      groupName: 'User Authentication'
      groupDescription: |-

        APIs for user registration, authentication, and account management.
        These endpoints handle user registration with email verification, login, password reset,
        and other authentication-related functionality for both clients and freelancers.
      subgroup: ''
      subgroupDescription: ''
      title: 'Change Email Address.'
      description: |-
        This endpoint allows authenticated users to change their email address by providing a new email
        and confirming their current password. A verification code will be sent to the new email address
        for verification. The user must then use the verifyChangeEmail endpoint to complete the email change.
        **Rate Limiting:** This endpoint is limited to 3 attempts per week per user to prevent abuse.
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The new email address (must be unique and valid).'
        required: true
        example: newemail@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'Current password confirmation (min 8 chars, must contain uppercase, lowercase, number, and special character).'
        required: true
        example: CurrentPassword123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email_confirmation:
        name: email_confirmation
        description: 'Email confirmation (must match email).'
        required: true
        example: newemail@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: newemail@example.com
      password: CurrentPassword123!
      email_confirmation: newemail@example.com
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Verification code sent to new email address"
          }
        headers: []
        description: 'Email change initiated successfully'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "Current password is incorrect"
          }
        headers: []
        description: 'Current password incorrect'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The email has already been taken."
          }
        headers: []
        description: 'New email already exists'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The email is already in the invitation list."
          }
        headers: []
        description: 'New email in invitation list'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The password confirmation does not match."
          }
        headers: []
        description: 'Validation error - Password confirmation mismatch'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The email must be a valid email address."
          }
        headers: []
        description: 'Validation error - Invalid email format'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The email field is required."
          }
        headers: []
        description: 'Validation error - Missing fields'
        custom: []
      -
        status: 401
        content: |-
          {
            "status": false,
            "error_num": 401,
            "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/verify-change-email
    metadata:
      groupName: 'User Authentication'
      groupDescription: |-

        APIs for user registration, authentication, and account management.
        These endpoints handle user registration with email verification, login, password reset,
        and other authentication-related functionality for both clients and freelancers.
      subgroup: ''
      subgroupDescription: ''
      title: 'Verify Email Change.'
      description: |-
        This endpoint verifies the OTP code sent to the new email address during the email change process.
        Users must first initiate an email change using the changeEmail endpoint, then use this endpoint
        to verify the new email address with the 4-digit OTP code sent to the new email.
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The new email address to verify (must be the same email used in changeEmail).'
        required: true
        example: newemail@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      otp:
        name: otp
        description: 'The 4-digit verification code sent to the new email address.'
        required: true
        example: '1234'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: newemail@example.com
      otp: '1234'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Email changed successfully"
          }
        headers: []
        description: 'Email change verified successfully'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "Invalid or expired verification code"
          }
        headers: []
        description: 'Invalid or expired OTP'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "Email change session expired or not found"
          }
        headers: []
        description: 'Email change session expired'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "No email change request found for this email"
          }
        headers: []
        description: 'Email verification not initiated'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The email must be a valid email address."
          }
        headers: []
        description: 'Validation error - Invalid email format'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The otp must be 4 digits."
          }
        headers: []
        description: 'Validation error - Invalid OTP format'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The email field is required."
          }
        headers: []
        description: 'Validation error - Missing fields'
        custom: []
      -
        status: 401
        content: |-
          {
            "status": false,
            "error_num": 401,
            "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/auth/profile
    metadata:
      groupName: 'User Authentication'
      groupDescription: |-

        APIs for user registration, authentication, and account management.
        These endpoints handle user registration with email verification, login, password reset,
        and other authentication-related functionality for both clients and freelancers.
      subgroup: ''
      subgroupDescription: ''
      title: 'Get User Profile.'
      description: |-
        This endpoint retrieves the authenticated user's profile information.
        Returns different data structures based on user type (freelancer or client).
        Freelancers will get additional fields like skills, category, portfolio links, etc.
        Clients will get basic profile information along with company details.
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Profile retrieved successfully",
            "data": {
              "id": 1,
              "name": "أحمد محمد",
              "email": "ahmed@example.com",
              "type": "freelancer",
              "email_verified_at": "2025-08-24T10:30:00.000000Z",
              "phone": null,
              "is_active": true,
              "about_me": "مطور ويب محترف مع خبرة 5 سنوات",
              "profile_picture": "storage/profiles/ahmed_profile.jpg",
              "approval_status": "approved",
              "linkedin_link": "https://linkedin.com/in/ahmed",
              "twitter_link": "https://twitter.com/ahmed",
              "other_freelance_platform_links": ["https://upwork.com/freelancers/ahmed"],
              "portfolio_link": "https://ahmed-portfolio.com",
              "headline": "Full Stack Developer & UI/UX Designer",
              "description": "Experienced developer specializing in Laravel and React",
              "category": {
                "id": 1,
                "name": "Web Development"
              },
              "skills": [
                {"id": 1, "name": "PHP"},
                {"id": 2, "name": "Laravel"},
                {"id": 3, "name": "React"}
              ],
              "portfolios": [],
              "created_at": "2025-08-24T10:30:00.000000Z",
              "updated_at": "2025-08-24T10:30:00.000000Z"
            }
          }
        headers: []
        description: 'Freelancer profile'
        custom: []
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Profile retrieved successfully",
            "data": {
              "id": 2,
              "name": "Jane Smith",
              "email": "jane@example.com",
              "email_verified_at": "2025-08-24T10:30:00.000000Z",
              "phone": "+1234567890",
              "type": "client",
              "is_active": true,
              "about_me": "Business owner looking for quality freelance services",
              "profile_picture": "storage/profiles/jane_profile.jpg",
              "company": "Tech Solutions Inc",
              "created_at": "2025-08-24T10:30:00.000000Z",
              "updated_at": "2025-08-24T10:30:00.000000Z"
            }
          }
        headers: []
        description: 'Client profile'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "Unable to retrieve profile information"
          }
        headers: []
        description: 'Profile retrieval failed'
        custom: []
      -
        status: 401
        content: |-
          {
            "status": false,
            "error_num": 401,
            "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/profile
    metadata:
      groupName: 'User Authentication'
      groupDescription: |-

        APIs for user registration, authentication, and account management.
        These endpoints handle user registration with email verification, login, password reset,
        and other authentication-related functionality for both clients and freelancers.
      subgroup: ''
      subgroupDescription: ''
      title: 'Update User Profile.'
      description: |-
        This endpoint allows authenticated users to update their profile information.
        The endpoint supports both freelancers and clients with different validation rules based on user type.
        Uses request filtering to only accept valid fields for each user type.

        **For Freelancers:**
        - Allowed fields: name, profile_picture, about_me, country, city, languages, headline, category_id, skill_ids
        - Optional fields: name, profile_picture, about_me, country, city, languages, headline, category_id, skill_ids
        - Prohibited fields: company, phone

        **For Clients:**
        - Allowed fields: name, profile_picture, about_me, country, city, languages, company, phone
        - Optional fields: name, profile_picture, about_me, country, city, languages, company, phone
        - Prohibited fields: headline, category_id, skill_ids
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: "sometimes User's full name (Arabic or English characters only)."
        required: false
        example: 'أحمد محمد'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      profile_picture:
        name: profile_picture
        description: 'sometimes Profile picture image file (max 2MB). Example:'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      about_me:
        name: about_me
        description: 'sometimes About me description (max 500 characters, optional).'
        required: false
        example: 'مطور ويب محترف مع خبرة 5 سنوات'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      country:
        name: country
        description: 'sometimes User country (max 100 characters, optional).'
        required: false
        example: 'Saudi Arabia'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      city:
        name: city
        description: 'sometimes User city (max 100 characters, optional).'
        required: false
        example: Riyadh
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      languages:
        name: languages
        description: 'sometimes Array of user languages (optional).'
        required: false
        example:
          -
            language_id: 1
            language_level: native
          -
            language_id: 2
            language_level: advanced
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      headline:
        name: headline
        description: 'sometimes Professional headline (for freelancers only, optional).'
        required: false
        example: 'Full Stack Developer'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      category_id:
        name: category_id
        description: 'sometimes Main category ID (for freelancers only, optional, must exist in categories).'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      skill_ids:
        name: skill_ids
        description: 'sometimes Array of skill IDs (for freelancers only, optional).'
        required: false
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      company:
        name: company
        description: 'sometimes Company name (for clients only, optional, max 255 characters).'
        required: false
        example: 'Tech Solutions Inc'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      phone:
        name: phone
        description: 'sometimes Phone number in Saudi format (for clients only, optional).'
        required: false
        example: '+966501234567'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'languages[].language_id':
        name: 'languages[].language_id'
        description: 'Language ID (must exist in languages table). This field is required when <code>languages.*</code> is present. The <code>id</code> of an existing record in the languages table.'
        required: false
        example: 1
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'languages[].language_level':
        name: 'languages[].language_level'
        description: 'Language proficiency level. This field is required when <code>languages.*</code> is present.'
        required: false
        example: advanced
        type: string
        enumValues:
          - basic
          - intermediate
          - advanced
          - native
        exampleWasSpecified: false
        nullable: false
        custom: []
      'languages.*.language_id':
        name: 'languages.*.language_id'
        description: 'Language ID (must exist in languages table).'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'languages.*.language_level':
        name: 'languages.*.language_level'
        description: 'Language proficiency level (basic, intermediate, advanced, native).'
        required: false
        example: advanced
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'skill_ids.*':
        name: 'skill_ids.*'
        description: 'Each skill ID must exist in skills table.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'أحمد محمد'
      about_me: 'مطور ويب محترف مع خبرة 5 سنوات'
      country: 'Saudi Arabia'
      city: Riyadh
      languages:
        -
          language_id: 1
          language_level: native
        -
          language_id: 2
          language_level: advanced
      headline: 'Full Stack Developer'
      category_id: 1
      skill_ids:
        - 1
        - 2
        - 3
      company: 'Tech Solutions Inc'
      phone: '+966501234567'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Profile updated successfully",
            "data": {
              "id": 1,
              "name": "أحمد محمد",
              "email": "ahmed@example.com",
              "type": "freelancer",
              "email_verified_at": "2025-08-24T10:30:00.000000Z",
              "phone": null,
              "is_active": true,
              "about_me": "مطور ويب محترف مع خبرة 5 سنوات",
              "profile_picture": "storage/profiles/ahmed_profile.jpg",
              "approval_status": "approved",
              "linkedin_link": "https://linkedin.com/in/ahmed",
              "twitter_link": "https://twitter.com/ahmed",
              "other_freelance_platform_links": ["https://upwork.com/freelancers/ahmed"],
              "portfolio_link": "https://ahmed-portfolio.com",
              "headline": "Full Stack Developer",
              "description": "Experienced developer specializing in Laravel and React",
              "category": {
                "id": 1,
                "name": "Web Development"
              },
              "skills": [
                {"id": 1, "name": "PHP"},
                {"id": 2, "name": "Laravel"},
                {"id": 3, "name": "React"}
              ],
              "portfolios": [],
              "created_at": "2025-08-24T10:30:00.000000Z",
              "updated_at": "2025-08-24T10:30:00.000000Z"
            }
          }
        headers: []
        description: 'Freelancer profile updated'
        custom: []
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Profile updated successfully",
            "data": {
              "id": 2,
              "name": "Jane Smith",
              "email": "jane@example.com",
              "email_verified_at": "2025-08-24T10:30:00.000000Z",
              "phone": "+966501234567",
              "type": "client",
              "is_active": true,
              "about_me": "Business owner looking for quality freelance services",
              "profile_picture": "storage/profiles/jane_profile.jpg",
              "company": "Tech Solutions Inc",
              "created_at": "2025-08-24T10:30:00.000000Z",
              "updated_at": "2025-08-24T10:30:00.000000Z"
            }
          }
        headers: []
        description: 'Client profile updated'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "You are not an approved freelancer"
          }
        headers: []
        description: 'Freelancer not approved'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "This category is not a parent category"
          }
        headers: []
        description: 'Invalid category'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The name format is invalid."
          }
        headers: []
        description: 'Validation error - Name format'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The company field is prohibited."
          }
        headers: []
        description: 'Validation error - Prohibited field'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The profile picture may not be greater than 2048 kilobytes."
          }
        headers: []
        description: 'Validation error - File too large'
        custom: []
      -
        status: 400
        content: |-
          {
            "status": false,
            "error_num": 400,
            "message": "The selected skill_ids.0 is invalid."
          }
        headers: []
        description: 'Validation error - Invalid skill'
        custom: []
      -
        status: 401
        content: |-
          {
            "status": false,
            "error_num": 401,
            "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/logout
    metadata:
      groupName: 'User Authentication'
      groupDescription: |-

        APIs for user registration, authentication, and account management.
        These endpoints handle user registration with email verification, login, password reset,
        and other authentication-related functionality for both clients and freelancers.
      subgroup: ''
      subgroupDescription: ''
      title: 'User Logout.'
      description: |-
        This endpoint logs out the authenticated user by invalidating their JWT token.
        After logout, the token cannot be used for authentication.
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Logout successful"
          }
        headers: []
        description: 'Logout successful'
        custom: []
      -
        status: 401
        content: |-
          {
            "status": false,
            "error_num": 401,
            "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/refresh
    metadata:
      groupName: 'User Authentication'
      groupDescription: |-

        APIs for user registration, authentication, and account management.
        These endpoints handle user registration with email verification, login, password reset,
        and other authentication-related functionality for both clients and freelancers.
      subgroup: ''
      subgroupDescription: ''
      title: 'Refresh Token.'
      description: |-
        This endpoint refreshes the user's JWT token, providing a new token with extended expiration time.
        Use this endpoint to maintain user sessions without requiring re-authentication.
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Token refreshed successfully",
            "data": {
              "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        headers: []
        description: 'Token refreshed successfully'
        custom: []
      -
        status: 200
        content: |-
          {
             "status": true,
             "error_num": null,
             "message": "Token Refreshed Successfully",
             "data": {
                 "user": {
                     "id": 2,
                     "name": "Ahmed test",
                     "email": "freelancer2@gmail.com",
                     "email_verified_at": "2025-09-11T11:33:20.000000Z",
                     "phone": "+966501234567",
                     "country_code": null,
                     "phone_number": null,
                     "type": "client",
                     "is_active": true,
                     "about_me": "Professional Full Stack Developer",
                     "profile_picture": "storage/profiles/68d28083a3dd1.PNG",
                     "company": "شركة التقنيات المتقدمة",
                     "country": "asd",
                     "city": "asd",
                     "is_verified": false,
                     "user_verification_status": "approved",
                     "created_at": "2025-09-03T11:34:36.000000Z",
                     "updated_at": "2025-09-23T11:12:03.000000Z",
                     "rate": 0,
                     "languages": null,
                     "reviews": null
                 },
                 "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2F1dGgvcmVmcmVzaCIsImlhdCI6MTc2MDg2OTYwOCwiZXhwIjoxNzYwODczMjMzLCJuYmYiOjE3NjA4Njk2MzMsImp0aSI6ImZmM2s5ZDJaS1Rmams4SDUiLCJzdWIiOiIyIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.Yhn36E5bG42bkrahNv8cOoQqpSyqHV-UHL_QB7GyfRE"
             }
          }
        headers: []
        description: 'Client token refreshed'
        custom: []
      -
        status: 200
        content: |-
          {
            "status": true,
            "error_num": null,
            "message": "Token Refreshed Successfully",
            "data": {
                "user": {
                    "id": 3,
                    "name": "Ahmed test",
                    "email": "freelancer3@gmail.com",
                    "type": "freelancer",
                    "email_verified_at": "2025-09-21T09:56:16.000000Z",
                    "phone": "1234567893",
                    "is_active": true,
                    "about_me": "Experienced freelancer with skills in various domains.",
                    "profile_picture": "storage/profiles/68d27bc809cf4.png",
                    "approval_status": "approved",
                    "country": null,
                    "city": null,
                    "linkedin_link": "https://linkedin.com/in/freelancer3",
                    "twitter_link": null,
                    "other_freelance_platform_links": [],
                    "portfolio_link": "https://portfolio.freelancer3.com",
                    "headline": "Professional Freelancer",
                    "is_verified": false,
                    "user_verification_status": null,
                    "rate": 4.67,
                    "created_at": "2025-09-03T11:34:37.000000Z",
                    "updated_at": "2025-09-23T10:51:52.000000Z",
                    "category": {
                        "id": 4,
                        "name": "Design",
                        "image": "storage/categories/68dd364f26e71.svg",
                        "parent_id": null,
                        "created_at": "2025-09-07T08:44:46.000000Z",
                        "updated_at": "2025-10-01T14:10:23.000000Z"
                    },
                    "languages": null,
                    "reviews": [
                        {
                            "id": 3,
                            "user_id": 2,
                            "rating": 5,
                            "comment": "Excellent freelancer! Very professional and delivered high-quality work on time. Great communication skills and attention to detail. Highly recommended for WordPress development projects.",
                            "user": {
                                "id": 2,
                                "name": "Ahmed test",
                                "email": "freelancer2@gmail.com",
                                "email_verified_at": "2025-09-11T11:33:20.000000Z",
                                "phone": "+966501234567",
                                "country_code": null,
                                "phone_number": null,
                                "type": "client",
                                "is_active": true,
                                "about_me": "Professional Full Stack Developer",
                                "profile_picture": "storage/profiles/68d28083a3dd1.PNG",
                                "company": "شركة التقنيات المتقدمة",
                                "country": "asd",
                                "city": "asd",
                                "is_verified": false,
                                "user_verification_status": "approved",
                                "created_at": "2025-09-03T11:34:36.000000Z",
                                "updated_at": "2025-09-23T11:12:03.000000Z",
                                "rate": 0,
                                "languages": null,
                                "reviews": null
                            },
                            "created_at": "2025-10-05T12:47:53.000000Z",
                            "updated_at": "2025-10-05T12:47:53.000000Z"
                        },
                        {
                            "id": 4,
                            "user_id": 4,
                            "rating": 4,
                            "comment": "Good work overall. The project was completed within the deadline and met most of our requirements. Would work with this freelancer again.",
                            "user": {
                                "id": 4,
                                "name": "Freelancer4",
                                "email": "freelancer4@example.com",
                                "email_verified_at": null,
                                "phone": "1234567894",
                                "country_code": null,
                                "phone_number": null,
                                "type": "freelancer",
                                "is_active": true,
                                "about_me": "Experienced freelancer with skills in various domains.",
                                "profile_picture": null,
                                "company": null,
                                "country": null,
                                "city": null,
                                "is_verified": false,
                                "user_verification_status": null,
                                "created_at": "2025-09-03T11:34:37.000000Z",
                                "updated_at": "2025-09-03T11:34:37.000000Z",
                                "rate": 0,
                                "languages": null,
                                "reviews": null
                            },
                            "created_at": "2025-10-05T12:48:33.000000Z",
                            "updated_at": "2025-10-05T12:48:33.000000Z"
                        },
                        {
                            "id": 5,
                            "user_id": 7,
                            "rating": 5,
                            "comment": "Outstanding developer! Exceeded expectations with creative solutions and clean code. Fast delivery and excellent communication throughout the project.",
                            "user": {
                                "id": 7,
                                "name": "Freelancer7",
                                "email": "freelancer7@example.com",
                                "email_verified_at": null,
                                "phone": "1234567897",
                                "country_code": null,
                                "phone_number": null,
                                "type": "freelancer",
                                "is_active": true,
                                "about_me": "Experienced freelancer with skills in various domains.",
                                "profile_picture": null,
                                "company": null,
                                "country": null,
                                "city": null,
                                "is_verified": false,
                                "user_verification_status": null,
                                "created_at": "2025-09-03T11:34:38.000000Z",
                                "updated_at": "2025-09-03T11:34:38.000000Z",
                                "rate": 0,
                                "languages": null,
                                "reviews": null
                            },
                            "created_at": "2025-10-05T12:48:33.000000Z",
                            "updated_at": "2025-10-05T12:48:33.000000Z"
                        }
                    ]
                },
                "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2F1dGgvcmVmcmVzaCIsImlhdCI6MTc2MDg2OTc4MywiZXhwIjoxNzYwODczMzk5LCJuYmYiOjE3NjA4Njk3OTksImp0aSI6IjRIdXlldnY2UjZCZXpSWHIiLCJzdWIiOiIzIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.akONhVkZTCjGyFVdEuF4QjI-uybIVlSkc84-H18oNJs"
            }
          }
        headers: []
        description: 'Freelancer token refreshed'
        custom: []
      -
        status: 401
        content: |-
          {
            "status": false,
            "error_num": 401,
            "message": "Token could not be refreshed"
          }
        headers: []
        description: 'Token invalid or expired'
        custom: []
      -
        status: 401
        content: |-
          {
            "status": false,
            "error_num": 401,
            "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
