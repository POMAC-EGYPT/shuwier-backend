## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Portfolio Management'
description: |-

  APIs for managing freelancer portfolios
endpoints:
  -
    httpMethods:
      - GET
    uri: api/freelancers/portfolios
    metadata:
      groupName: 'Portfolio Management'
      groupDescription: |-

        APIs for managing freelancer portfolios
      subgroup: ''
      subgroupDescription: ''
      title: 'Get user portfolios'
      description: 'Retrieve all portfolios for the authenticated freelancer with pagination.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      per_page:
        name: per_page
        description: 'Number of portfolios per page. Default is 10.'
        required: false
        example: 15
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      per_page: 15
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Success",
            "status": true,
            "data": {
              "data": [
                {
                  "id": 1,
                  "title": "E-commerce Website",
                  "description": "Modern responsive e-commerce website",
              "cover_photo": "storage/portfolios/68ee0f54b6ee8.PNG",
                  "category": {
                    "id": 1,
                    "name": "Web Development"
                  },
                  "subcategory": {
                    "id": 2,
                    "name": "Frontend"
                  },
                  "hashtags": ["#react", "#ecommerce"],
                  "attachments": [
                    {
                      "id": 1,
                      "file_path": "storage/portfolios/image1.jpg"
                    }
                  ]
                }
              ],
              "current_page": 1,
              "per_page": 10,
              "total": 25
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/freelancers/portfolios
    metadata:
      groupName: 'Portfolio Management'
      groupDescription: |-

        APIs for managing freelancer portfolios
      subgroup: ''
      subgroupDescription: ''
      title: 'Create new portfolio'
      description: 'Create a new portfolio for the authenticated freelancer.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: multipart/form-data
      Accept: application/json
      Accept-Language: en
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The portfolio title (max 255 characters).'
        required: true
        example: '"E-commerce Website"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'The portfolio description.'
        required: true
        example: '"A modern responsive e-commerce website built with React and Laravel"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      category_id:
        name: category_id
        description: 'The main category ID (must be a parent category).'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      subcategory_id:
        name: subcategory_id
        description: 'optional The subcategory ID (must belong to the selected category).'
        required: false
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      attachment_ids:
        name: attachment_ids
        description: 'optional Array of attachment IDs from uploaded files (max 8 files). Use /api/upload endpoint first to upload files and get IDs.'
        required: false
        example:
          - 15
          - 16
          - 17
        type: 'integer[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      cover_photo:
        name: cover_photo
        description: 'optional The portfolio cover photo (required for creation, optional for updates). Accepted formats: jpeg, png, jpg, webp. Max size: 5MB'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      hashtags:
        name: hashtags
        description: 'optional Array of hashtag strings (max 255 characters each).'
        required: false
        example:
          - react
          - ecommerce
          - laravel
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      title: '"E-commerce Website"'
      description: '"A modern responsive e-commerce website built with React and Laravel"'
      category_id: 1
      subcategory_id: 2
      attachment_ids:
        - 15
        - 16
        - 17
      hashtags:
        - react
        - ecommerce
        - laravel
    fileParameters:
      cover_photo: null
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Portfolio created successfully",
            "status": true,
            "data": {
              "id": 1,
              "title": "E-commerce Website",
              "description": "A modern responsive e-commerce website",
              "cover_photo": "storage/portfolios/68ee0f54b6ee8.PNG",
              "category": {
                "id": 1,
                "name": "Web Development"
              },
              "subcategory": {
                "id": 2,
                "name": "Frontend"
              },
              "hashtags": ["#react", "#ecommerce"],
              "attachments": [
                {
                  "id": 1,
                  "file_path": "storage/portfolios/image1.jpg"
                }
              ]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "This category is not a parent category",
            "status": false,
            "error_code": 400
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "This subcategory does not belong to the selected category",
            "status": false,
            "error_code": 400
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/freelancers/portfolios/{id}'
    metadata:
      groupName: 'Portfolio Management'
      groupDescription: |-

        APIs for managing freelancer portfolios
      subgroup: ''
      subgroupDescription: ''
      title: 'Get specific portfolio'
      description: 'Retrieve a specific portfolio by its ID with all related data.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters:
      id:
        name: id
        description: 'The portfolio ID.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Success",
            "status": true,
            "data": {
              "id": 1,
              "title": "E-commerce Website",
              "description": "A modern responsive e-commerce website",
              "cover_photo": "storage/portfolios/68ee0f54b6ee8.PNG",
              "category": {
                "id": 1,
                "name": "Web Development"
              },
              "subcategory": {
                "id": 2,
                "name": "Frontend"
              },
              "hashtags": ["#react", "#ecommerce"],
              "attachments": [
                {
                  "id": 1,
                  "file_path": "storage/portfolios/image1.jpg"
                }
              ]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Portfolio not found",
            "status": false,
            "error_code": 400
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/freelancers/portfolios/{id}'
    metadata:
      groupName: 'Portfolio Management'
      groupDescription: |-

        APIs for managing freelancer portfolios
      subgroup: ''
      subgroupDescription: ''
      title: 'Update portfolio'
      description: |-
        Update an existing portfolio. **Important behavior notes:**

        **For Attachments:**
        - If you send `attachment_ids` parameter (even as empty array), ALL existing attachments will be detached and replaced with the new ones
        - If you don't send `attachment_ids` parameter at all, existing attachments will remain unchanged
        - You need to upload files first using /api/upload endpoint to get attachment IDs
        - Example: To change attachments, send new attachment IDs: `"attachment_ids": [20, 21, 22]`

        **For Hashtags:**
        - If you send `hashtags` parameter (even as empty array), ALL existing hashtags will be replaced with the new ones
        - If you don't send `hashtags` parameter at all, existing hashtags will remain unchanged
        - To remove all hashtags, send an empty array: `"hashtags": []`
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: multipart/form-data
      Accept: application/json
      Accept-Language: en
    urlParameters:
      id:
        name: id
        description: 'The portfolio ID to update.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The portfolio title (max 255 characters).'
        required: true
        example: '"Updated E-commerce Website"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'The portfolio description.'
        required: true
        example: '"An updated modern responsive e-commerce website"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      category_id:
        name: category_id
        description: 'The main category ID (must be a parent category).'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      subcategory_id:
        name: subcategory_id
        description: 'optional The subcategory ID (must belong to the selected category). Set to null to remove subcategory.'
        required: false
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      attachment_ids:
        name: attachment_ids
        description: 'optional Array of attachment IDs from uploaded files (max 8 files). **CAUTION:** If provided, ALL existing attachments will be detached first.'
        required: false
        example:
          - 20
          - 21
          - 22
        type: 'integer[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      cover_photo:
        name: cover_photo
        description: 'optional The portfolio cover photo (required for creation, optional for updates). Accepted formats: jpeg, png, jpg, webp. Max size: 5MB'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      hashtags:
        name: hashtags
        description: 'optional Array of hashtag strings. **CAUTION:** If provided, ALL existing hashtags will be replaced.'
        required: false
        example:
          - react
          - updated
          - laravel
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      title: '"Updated E-commerce Website"'
      description: '"An updated modern responsive e-commerce website"'
      category_id: 1
      subcategory_id: 2
      attachment_ids:
        - 20
        - 21
        - 22
      hashtags:
        - react
        - updated
        - laravel
    fileParameters:
      cover_photo: null
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Portfolio updated successfully",
            "status": true,
            "data": {
              "id": 1,
              "title": "Updated E-commerce Website",
              "description": "An updated modern responsive e-commerce website",
              "cover_photo": "storage/portfolios/68ee0f54b6ee8.PNG",
              "category": {
                "id": 1,
                "name": "Web Development"
              },
              "subcategory": {
                "id": 2,
                "name": "Frontend"
              },
              "hashtags": ["#react", "#updated"],
              "attachments": [
                {
                  "id": 2,
                  "file_path": "storage/portfolios/new_image.jpg"
                }
              ]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "This category is not a parent category",
            "status": false,
            "error_code": 400
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "This attachment is already used",
            "status": false,
            "error_code": 400
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "This attachment does not belong to the user",
            "status": false,
            "error_code": 400
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/freelancers/portfolios/{id}'
    metadata:
      groupName: 'Portfolio Management'
      groupDescription: |-

        APIs for managing freelancer portfolios
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete portfolio'
      description: |-
        Permanently delete a portfolio and all its associated data including attachments and hashtag relationships.
        **Warning:** This action cannot be undone. All uploaded files will also be deleted from storage.
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Accept-Language: en
    urlParameters:
      id:
        name: id
        description: 'The portfolio ID to delete.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Portfolio deleted successfully",
            "status": true,
            "data": null
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Portfolio not found",
            "status": false,
            "error_code": 404
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
